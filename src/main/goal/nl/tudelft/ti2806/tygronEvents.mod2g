use serviceKnowledge as knowledge.
use serviceBeliefs as beliefs.

% Tygron Event:
% - states: 9
% - description: Percept Processing
module tygronEvents {

	% description: when we get a new building percept, we want to delete the buildings that aren't there. 
	% We also don't  need the buildings we sold.
	forall
		percept(buildings(NewBuildings)),
		bel(
			my_stakeholder_id(StakeholderID),
			building(StakeholderID, BuildingID, FunctionID),
			not(member(building(BuildingID, _, StakeholderID, _, _, FunctionID, _, MultiPolygon, Area), NewBuildings))
		)
	do
		delete(building(StakeholderID, BuildingID, FunctionID)).

	% description: when we get a new building percept, we want to insert the buildings that are new. 
	% We also need the buildings we bought and built.
	forall
		percept(buildings(NewBuildings)),
		bel(
			my_stakeholder_id(StakeholderID),
			member(building(BuildingID, _, StakeholderID, _, _, FunctionID, _, MultiPolygon, Area), NewBuildings),
			not(building(StakeholderID, BuildingID, FunctionID)),
			not(MultiPolygon == multipolygon('MULTIPOLYGON EMPTY'))
		)
	do
		insert(building(StakeholderID, BuildingID, FunctionID)).
	
	% description: if we get a lands percept, we want to delete the land that is not ours anymore.		
	forall
		percept(lands(NewLand)),
		bel(
			my_stakeholder_id(StakeholderID),
			land(LandID, StakeholderID, Area),
			not(member(land(LandID, StakeholderID, _, _, Area), NewLand))
		)
	do
		delete(land(LandID, StakeholderID, Area)).
	
	% description: if we get a lands percept, we want to insert the new land that is ours.
	forall
		percept(lands(NewLand)),
		bel(
			my_stakeholder_id(StakeholderID),
			not(land(LandID, StakeholderID, Area)),
			member(land(LandID, StakeholderID, _, _, Area), NewLand)
		)
	do
		insert(land(LandID, StakeholderID, Area)).

	% description: Whenever functions are percepted old functions will be deleted and new functions will be inserted.
	if 
		percept(functions(NewFunctions)), 
		bel(functions(OldFunctions)) 
	then 
		delete(functions(OldFunctions)) + 
		insert(functions(NewFunctions)).
	
	% description: During initialisation the list of indicators are inserted into the belief base. 
	% forall:
	% - indicators where the current value has changed
	% do:
	% - update the indicator
	forall 
		percept(indicators(IndicatorList)), 
		bel(
			indicator(IndicatorID, OldValue, TargetValue, OldZone_LinkList), 
			member(indicator(IndicatorID, CurrentValue, TargetValue, Zone_LinkList),IndicatorList)
		)
	do 
		delete (indicator(IndicatorID, OldValue, TargetValue,OldZone_LinkList)) + 
		insert(indicator(IndicatorID, CurrentValue, TargetValue, Zone_LinkList)).	
	
	% description: Whenever requests are percepted each request is inserted.
	forall
		percept(requests(RequestList)),
		bel(
			member(request(TypeName, Type, PopupId, PopupContentLinkId, VisibleForStakeholders, ActionLogId, Price, MultiPolygon, Area, Answers), RequestList),
			my_stakeholder_id(StakeholderID),
			member(StakeholderID, VisibleForStakeholders),
			not(request_answered(PopupId))
		)
	do
		insert(request(TypeName, Type, PopupId, PopupContentLinkId, VisibleForStakeholders, ActionLogId, Price, MultiPolygon, Area, Answers)).

	% description:Whenever the list of stakeholders is updated all stakeholder/4 beliefs will be updated accordingly.
	% forall:
	% - stakeholders where the income has changed
	% do: 
	% - update the stakeholder
	forall 
		percept(stakeholders(CombinedList)), 
		bel(
			stakeholder(StakeholderId, Name, OldIncome, StartBudget), 
			member(StakeholderList, CombinedList), 
			member(stakeholder(StakeholderId, Name, NewIncome, StartBudget), StakeholderList), 
			not(NewIncome == OldIncome)
		) 
	do 
		delete(stakeholder(StakeholderId, Name, OldIncome, StartBudget)) + 
		insert(stakeholder(StakeholderId, Name, NewIncome, StartBudget)).
	
	% description: Whenever the list of zones is updated all zone/5 beliefs will be updated accordingly.
	% forall:
	% - zones where either the MaxFloors or Allowed_Categories changes 
	% do:
	% - update the zone
	forall 
		percept(zones(ZoneList)), 
		bel(
			zone(ZoneId, ZoneName, OldMaxFloors, Size, OldAllowed_Categories), 
			member(zone(ZoneId, ZoneName, NewMaxFloors, Size, NewAllowed_Categories), ZoneList), 
			(
				not(NewMaxFloors == OldMaxFloors); 
				not(NewAllowed_Categories == OldAllowed_Categories)
			)
		)
	do 
		delete(zone(ZoneId, ZoneName, OldMaxFloors, Size, OldAllowed_Categories)) + 
		insert(zone(ZoneId, ZoneName, NewMaxFloors, Size, NewAllowed_Categories)).
}
